// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Audit {
  id        Int          @id @default(autoincrement())
  timestamp DateTime     @default(now())
  severity  Severity     @default(normal)
  action    String
  namespace String
  phase     String
  app       String
  pipeline  String
  resource  ResourceType @default(unknown)
  message   String

  user  String
  users User   @relation(fields: [user], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Severity {
  normal
  info
  warning
  critical
  error
  unknown
}

enum ResourceType {
  user
  namespace
  phase
  app
  pipeline
  unknown
  system
  build
  addon
  settings
  events
  security
  templates
  config
  addons
  kubernetes
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  twoFaSecret   String?
  twoFaEnabled  Boolean   @default(false)
  image         String?

  roleId     String?
  role       Role?       @relation(fields: [roleId], references: [id])
  userGroups UserGroup[] // Many-to-many relationship with UserGroup

  isActive  Boolean   @default(true)
  lastLogin DateTime?
  lastIp    String? // Last known IP address

  provider     String? @default("local") // e.g., "github", "local", ...
  providerId   String? // ID from the external provider (e.g., GitHub ID)
  providerData String? // JSON string for additional provider data

  tokens Token[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Audit     Audit[]
}

model UserGroup {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  users       User[] // Users associated with this role
  permissions Permission[] // Permissions directly assigned to this role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id          String    @id @default(cuid())
  name        String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  token       String    @unique
  expiresAt   DateTime
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  lastIp      String? // Last known IP address used for this token
  description String? // Description of the token's purpose

  permissions Permission[] // Permissions associated with this token

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id        String       @id @default(cuid())
  resource  ResourceType
  action    String // e.g., "create", "read", "update", "delete"
  namespace String? // Optional namespace for scoping permissions

  roles  Role[] // Roles that have this permission
  tokens Token[] // Tokens that have this permission

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// CONFIGURATION 
model Buildpack {
  id          String         @id @default(cuid())
  name        String
  language    String
  fetch       BuildpackPhase @relation("fetch", fields: [fetchId], references: [id])
  fetchId     String
  build       BuildpackPhase @relation("build", fields: [buildId], references: [id])
  buildId     String
  run         BuildpackPhase @relation("run", fields: [runId], references: [id])
  runId       String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model BuildpackPhase {
  id                   String                @id @default(cuid())
  repository           String
  tag                  String
  command              String?
  readOnlyAppStorage   Boolean
  securityContext      SecurityContext       @relation("SecurityContextOnBuildpackPhase", fields: [securityContextId], references: [id])
  securityContextId    String
  buildpacksFetch      Buildpack[]           @relation("fetch")
  buildpacksBuild      Buildpack[]           @relation("build")
  buildpacksRun        Buildpack[]           @relation("run")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model SecurityContext {
  id                        String      @id @default(cuid())
  runAsUser                 Int
  runAsGroup                Int
  runAsNonRoot              Boolean
  readOnlyRootFilesystem    Boolean
  allowPrivilegeEscalation  Boolean
  capabilities              Capability[]
  buildpackPhases           BuildpackPhase[] @relation("SecurityContextOnBuildpackPhase")
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
}

model Capability {
  id            String   @id @default(cuid())
  add           CapabilityAdd[]
  drop          CapabilityDrop[]
  securityCtxId String
  securityCtx   SecurityContext @relation(fields: [securityCtxId], references: [id])
}

model CapabilityAdd {
  id           String      @id @default(cuid())
  value        String
  capability   Capability  @relation(fields: [capabilityId], references: [id])
  capabilityId String
}

model CapabilityDrop {
  id           String      @id @default(cuid())
  value        String
  capability   Capability  @relation(fields: [capabilityId], references: [id])
  capabilityId String
}